// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model EmpyloUser {
  id                String        @id @unique @default(cuid())
  email             String        @unique
  created_at        DateTime?     @default(now())
  firstName         String?
  lastName          String?
  phoneNumber       String?       @unique
  role              SystemRole    @default(admin)
  lastLogin         DateTime?
  passportImg       String?
  isActive          Boolean?      @default(false)
  updated_at        DateTime?     @updatedAt
  isEmailVerified   Boolean?      @default(false)
  verificationCode  String?       @unique
  status            UserStatus    @default(inactive)
  gender            UserGender?
  maritalStatus     MaitalStatus?
  empyloID          String?
  permissions       String[]
  passwordResetCode String?       @unique
  password          String?
  weeklyAssessment  Assessment[]  @relation("assessment_weekly")
  checkinAssessment Assessment[]  @relation("assessment_checkin")
}

model CompanyUser {
  id                  String           @id @unique @default(cuid())
  email               String           @unique
  created_at          DateTime?        @default(now())
  companyName         String?
  phoneNumber         String?
  password            String?
  passwordResetCode   String?          @unique
  lastLogin           DateTime?
  passportImg         String?
  isActive            Boolean?         @default(false)
  updated_at          DateTime?        @updatedAt
  isEmailVerified     Boolean?         @default(false)
  verificationCode    String?          @unique
  industry            String?
  website             String?
  companyDescription  String?
  status              UserStatus       @default(inactive)
  role                SystemRole       @default(company)
  address             String?
  addressCity         String?
  addressState        String?
  emailNotification   Boolean?         @default(false)
  campaignNtification Boolean?         @default(false)
  termsConditions     Boolean?         @default(false)
  membersList         User[]
  company_circle      CompanyCircles[] @relation("circles_company_user_fkey")
  socialId            String?
  socialProvider      String?
}

model CompanyCircles {
  id                   String        @id @unique @default(cuid())
  created_at           DateTime?     @default(now())
  updated_at           DateTime?     @updatedAt
  coyCircleName        String?       @unique
  coyCircleDescription String?       @db.VarChar(1000)
  coyCircleShareLink   String?       @unique
  wellbeingScore       String?
  activityLevel        ActivityLevel @default(low)
  companyUser          CompanyUser?  @relation("circles_company_user_fkey", fields: [companyUserId], references: [id])
  companyUserId        String?
  coyCircleStatus      UserStatus    @default(inactive)
  coyCircleNos         String?       @unique
  memberList           User[]
  circleImg            String?
  circleStatus         CircleStatus? @default(ongoing)
}

model User {
  id                  String           @id @unique @default(cuid())
  email               String           @unique
  created_at          DateTime?        @default(now())
  firstName           String?
  lastName            String?
  phoneNumber         String?          @unique
  ageRange            String?
  ethnicity           String?
  gender              UserGender?
  maritalStatus       MaitalStatus?
  disability          String?
  DOB                 String?
  accountType         UserAccount      @default(personalUser)
  department          String?
  jobRole             String?
  password            String?
  role                SystemRole       @default(user)
  passwordResetCode   String?          @unique
  companyUser         CompanyUser?     @relation(fields: [createdBy], references: [id])
  createdBy           String?
  lastLogin           DateTime?
  passportImg         String?
  isActive            Boolean?         @default(false)
  updated_at          DateTime?        @updatedAt
  isEmailVerified     Boolean?         @default(false)
  verificationCode    String?          @unique
  status              UserStatus       @default(inactive)
  address             String?
  bio                 String?
  emailNotification   Boolean?         @default(false)
  campaignNtification Boolean?         @default(false)
  termsConditions     Boolean?         @default(false)
  addedBy             String?          @unique
  coyCircleAttachedTo CompanyCircles[]
  userCircles         UserCircles[]    @relation("userCircles")
  otherUserCirclesIn  UserCircles[]    @relation("memberInCrircle")
  socialId            String?
  socialProvider      String?
  listOfScoreDetail   ScoreDetail[]    @relation("userCirclesScores")
}

model UserCircles {
  id                    String        @id @unique @default(cuid())
  circleImg             String?
  created_at            DateTime?     @default(now())
  updated_at            DateTime?     @updatedAt
  userCircleName        String?       @unique
  userCircleDescription String?       @db.VarChar(1000)
  userCircleShareLink   String?       @unique
  wellbeingScore        String?
  activityLevel         ActivityLevel @default(low)
  user                  User?         @relation("userCircles", fields: [userId], references: [id])
  userId                String?
  createdBy             String?
  userCircleStatus      UserStatus    @default(inactive)
  userCircleNos         String?       @unique
  memberList            User[]        @relation("memberInCrircle")
  circleStatus          CircleStatus? @default(ongoing)
}

model Assessment {
  id                String          @id @unique @default(cuid())
  created_at        DateTime?       @default(now())
  setNo             String?         @unique
  assessmentType    AssessmentType? @unique
  setQuestions      String[]
  empyloUser        EmpyloUser?     @relation("assessment_weekly", fields: [createdWeeklyBy], references: [id])
  empyloUserCheckin EmpyloUser?     @relation("assessment_checkin", fields: [createdCheckinBy], references: [id])
  createdWeeklyBy   String?
  createdCheckinBy  String?
}

model ScoreDetail {
  id             String          @id @unique @default(cuid())
  owner          User?           @relation("userCirclesScores", fields: [ownerID], references: [id])
  ownerID        String?
  weeklyScore    Int?            
  dailyScore     Int?
  wellbeingScore Int?
  setNo          String?
  assessmentType AssessmentType? @unique
}

enum AssessmentType {
  weekly
  dailyCheckin
}

enum SystemRole {
  superAdmin
  admin
  user
  company
}

enum UserGender {
  male
  female
}

enum UserStatus {
  active
  pending
  inactive
}

enum AccountStatus {
  verified
  unverified
}

enum CircleStatus {
  ongoing
  completed
  unenrolled
}

enum ActivityLevel {
  high
  moderate
  excellent
  moderatelyHigh
  low
}

enum UserAccount {
  personalUser
  clientUser
}

enum MaitalStatus {
  married
  single
  divorce
}
